plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
} else {
    keystoreProperties['keyAlias'] = "androiddebugkey"
    keystoreProperties['keyPassword'] = "android"
    keystoreProperties['storeFile'] = "debug.keystore"
    keystoreProperties['storePassword'] = "android"
}


def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

task selectGoogleServicesJson(type: Copy) {
    from "src/$flavor/google-services.json"
    into './'
}

task copyMipmaps(type: Copy) {
    from "src/$flavor/res"
    include 'mipmap-*/'
    into 'src/main/res'
}

task copyDrawables(type: Copy) {
    from "src/$flavor/res"
    include 'drawable-*/'
    into 'src/main/res'
}

tasks.whenTaskAdded { task ->
    task.dependsOn selectGoogleServicesJson
    task.dependsOn copyMipmaps
    task.dependsOn copyDrawables
}

android {
    namespace "jp.flutterkaigi.conf2023"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "jp.flutterkaigi.conf2023"
        minSdkVersion 30
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        applicationIdSuffix app_id_suffix
        resValue "string", "app_name", app_name
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
